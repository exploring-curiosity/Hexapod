/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include<math.h>

#define PI 3.14
double distanceBtw(double a,double b,double c,double p,double q,double r);
void calcMoves();
void updateLeg(int i);
bool isSame(int i);
void calcMotor2Pos(int i);
void calcAlpha(int i);
void calcBeta(int i);
void calcGamma(int i);
void manualSetAngle(unsigned int Servo1, unsigned int Servo2, unsigned int Servo3, unsigned int Servo4, unsigned int Servo5, unsigned int Servo6, unsigned int Servo7, unsigned int Servo8, unsigned int Servo9, unsigned int Servo10, unsigned int Servo11, unsigned int Servo12, unsigned int Servo13, unsigned int Servo14, unsigned int Servo15, unsigned int Servo16, unsigned int Servo17, unsigned int Servo18);
void displayAngle();

void standUp();
void lieFlat();
void idleState();
void moveFront();
void moveFront(int incr);
void liftLeg(int i);

void setIncrX(int incr,int i);

bool isIdleState =true;
bool activeLegSet=false;
double h=16,C=6,F=17,T=24;
int minR=20,maxR=35;

double legFootPos[6][3]={{32.5,18,h}, {32.5,-18,h}, {0,33.5,h}, {0,-33.5,h}, {-32.5,18,h}, {-32.5,-18,h}};
double destFootPos[6][3]={{30.5,17,h}, {30.5,-17,h}, {0,31.5,h}, {0,-31.5,h}, {-30.5,17,h}, {-30.5,-17,h}};
double motor1Pos[6][3]={{15,8,0}, {15,-8,0}, {0,13.5,0}, {0,-13.5,0}, {-15,8,0}, {-15,-8,0}};
double motor2Pos[6][3]={{0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}};
int zeroError[18]={0,0,0, 0,0,0, 3,0,0, 1,0,0, 3,0,0, -3,0,0};
double S_ang[18]={90,90,90, 90,90,90, 90,90,90, 90,90,90, 90,90,90, 90,90,90};

void display(){
    printf("\n%f %f %f\n",S_ang[0],S_ang[1],S_ang[2]);
    printf("%f %f %f\n",S_ang[3],S_ang[4],S_ang[5]);
    printf("%f %f %f\n",S_ang[6],S_ang[7],S_ang[8]);
    printf("%f %f %f\n",S_ang[9],S_ang[10],S_ang[11]);
    printf("%f %f %f\n",S_ang[12],S_ang[13],S_ang[14]);
    printf("%f %f %f\n",S_ang[15],S_ang[16],S_ang[17]);
}

int main()
{
    updateLeg(0);
    updateLeg(1);
    updateLeg(2);
    updateLeg(3);
    updateLeg(4);
    updateLeg(5);
    display();
    moveFront(-10);
    display();
    // setIncrX(1,5);
    // printf("%f %f",destFootPos[5][0],destFootPos[5][1]);
    return 0;
}

double distanceBtw(double a,double b,double c,double p,double q,double r){
  return sqrt(((p-a)*(p-a))+((q-b)*(q-b))+((r-c)*(r-c)));
}

void calcMoves(){}

void updateLeg(int i){
  calcAlpha(i);
  calcMotor2Pos(i);
  calcBeta(i);
  calcGamma(i);
}

bool isSame(int i){
  if((legFootPos[i][0]==destFootPos[i][0])&&(legFootPos[i][1]==destFootPos[i][1])&&(legFootPos[i][2]==destFootPos[i][2]))
    return true;
   return false;
}

void calcMotor2Pos(int i)
{
   double theta,alpha=S_ang[3*i];
   switch(i){
    case 0:theta=alpha-30;break;
    case 1:theta=210-alpha;break;
    case 2:theta=alpha-90;break;
    case 3:theta=270-alpha;break;
    case 4:theta=alpha-150;break;
    case 5:theta=330-alpha;break;
   }
   double rad=theta*PI/180;
   motor2Pos[i][0]=C*sin(rad)+motor1Pos[i][0];
   motor2Pos[i][1]=C*cos(rad)+motor1Pos[i][1];
   motor2Pos[i][2]=motor1Pos[i][2];
}
void calcAlpha(int i)
{
  double l1 =distanceBtw(motor1Pos[i][0],motor1Pos[i][1],motor1Pos[i][2],destFootPos[i][0],destFootPos[i][1],destFootPos[i][2]);
  
  double phi,alpha;
  if((destFootPos[i][0]-motor1Pos[i][0])>=0){
    phi=acos((destFootPos[i][1]-motor1Pos[i][1])/sqrt((l1*l1)-(h*h)))*180/PI;;
  }
  else {
    phi=360-(acos((destFootPos[i][1]-motor1Pos[i][1])/sqrt((l1*l1)-(h*h)))*180/PI);;
  }
  switch(i){
    case 0:alpha=phi+30;break;
    case 1:alpha=210-phi;break;
    case 2:alpha=phi+90;break;
    case 3:alpha=270-phi;break;
    case 4:alpha=phi+150;break;
    case 5:alpha=330-phi;break;
  }
  if(alpha>=360){
    alpha=alpha-360;
  }
  S_ang[3*i]=alpha;
}
  
void calcBeta(int i)
{
  double l2=distanceBtw(motor2Pos[i][0],motor2Pos[i][1],motor2Pos[i][2],destFootPos[i][0],destFootPos[i][1],destFootPos[i][2]); 
  double beta=acos(h/l2)*180/PI;
  beta=beta+(acos(((l2*l2)+(F*F)-(T*T))/(2*F*l2))*180/PI);
  S_ang[3*i+1]=beta;
}

void calcGamma(int i)
{
  double l2=distanceBtw(motor2Pos[i][0],motor2Pos[i][1],motor2Pos[i][2],destFootPos[i][0],destFootPos[i][1],destFootPos[i][2]);  
  double gamma;
  gamma = acos(((F*F)+(T*T)-(l2*l2))/(2*F*T))*180/PI;
  S_ang[3*i+2]=gamma;  
}

int checkRegion(int x,int y,int i){
    double l1 =distanceBtw(motor1Pos[i][0],motor1Pos[i][1],motor1Pos[i][2],destFootPos[i][0]+x,destFootPos[i][1]+y,destFootPos[i][2]);
    double phi,alpha;
    if((destFootPos[i][0]-motor1Pos[i][0])>=0){
    phi=acos((destFootPos[i][1]-motor1Pos[i][1])/sqrt((l1*l1)-(h*h)))*180/PI;;
    }
    else {
    phi=360-(acos((destFootPos[i][1]-motor1Pos[i][1])/sqrt((l1*l1)-(h*h)))*180/PI);;
    }
    switch(i){
        case 0:alpha=phi+30;break;
        case 1:alpha=210-phi;break;
        case 2:alpha=phi+90;break;
        case 3:alpha=270-phi;break;
        case 4:alpha=phi+150;break;
        case 5:alpha=330-phi;break;
    }
    if(alpha>=360){
        alpha=alpha-360;
    }
    if(alpha>180 || alpha<0) return 0;
    double d=sqrt((l1*l1)-(h*h));
    if(d<minR) return 1;
    else if(d<=maxR) return 2;
    return 0;
}

void setIncrX(int incr,int i)
{
    int region=checkRegion(incr,0,i);
    if(region==0){
        printf("\n\nERROR\n\n");
        return;
    }
    else if(region==2){
        destFootPos[i][0]+=incr;
        return;
    }
    else{
        double p=sqrt((minR*minR)-(destFootPos[i][0]+incr-motor1Pos[i][0])*(destFootPos[i][0]+incr-motor1Pos[i][0]));
        switch(i){
            case 0: if(S_ang[3*i]>120) p*=-1; break;
            case 1: if(S_ang[3*i]<120) p*=-1; break;
            case 2: break;
            case 3: p*=-1; break;
            case 4: if(S_ang[3*i]<60) p*=-1; break;
            case 5: if(S_ang[3*i]>60) p*=-1; break;
        }
        double y=motor1Pos[i][1]+p;
        destFootPos[i][0]+=incr;
        destFootPos[i][1]=y;
        return;
    }
}
void legPosReset(int i){
    destFootPos[i][0]=legFootPos[i][0];
    destFootPos[i][1]=legFootPos[i][1];
    destFootPos[i][2]=legFootPos[i][2];
}
int imf=0;
void moveFront(int incr){
  bool endMov=false;
  if(imf<5){
    imf++;
  }
  else{
    endMov=true;
  }
  if(isIdleState){
    if(endMov) return;
    isIdleState=false;
    if(activeLegSet){ //move Set 1
      activeLegSet=!activeLegSet;
      liftLeg(1);
      liftLeg(2);
      liftLeg(5);
      display();
      setIncrX(incr,1);
      setIncrX(incr,2);
      setIncrX(incr,5);
      updateLeg(1);
      updateLeg(2);
      updateLeg(5);
      display();
    }
    else{
      //move set 2
      activeLegSet=!activeLegSet;
      liftLeg(0);
      liftLeg(3);
      liftLeg(4);
      display();
      setIncrX(incr,0);
      setIncrX(incr,3);
      setIncrX(incr,4);
      updateLeg(0);
      updateLeg(3);
      updateLeg(4);
      display();
    }
    moveFront(incr);
  }
  else{
    if(endMov){
        printf("\n END MOVE\n");
      if(activeLegSet){ //move Set 1
        activeLegSet=!activeLegSet;
        liftLeg(1);
        liftLeg(2);
        liftLeg(5);
        legPosReset(0);
        legPosReset(3);
        legPosReset(4);
        updateLeg(0);
        updateLeg(3);
        updateLeg(4);
        display();
        updateLeg(1);
        updateLeg(2);
        updateLeg(5);
        display();
      }
      else{
        //move set 2
        activeLegSet=!activeLegSet;
        liftLeg(0);
        liftLeg(3);
        liftLeg(4);
        legPosReset(1);
        legPosReset(2);
        legPosReset(5);
        updateLeg(1);
        updateLeg(2);
        updateLeg(5);
        display();
        updateLeg(0);
        updateLeg(3);
        updateLeg(4);
        display();
      }
      isIdleState=true;
      return;
    }
    else{
      if(activeLegSet){ //move Set 1
        activeLegSet=!activeLegSet;
        liftLeg(1);
        liftLeg(2);
        liftLeg(5);
        legPosReset(0);
        legPosReset(3);
        legPosReset(4);
        updateLeg(0);
        updateLeg(3);
        updateLeg(4);
        display();
        setIncrX(incr,1);
        setIncrX(incr,2);
        setIncrX(incr,5);
        updateLeg(1);
        updateLeg(2);
        updateLeg(5);
        display();
      }
      else{
        //move set 2
        activeLegSet=!activeLegSet;
        liftLeg(0);
        liftLeg(3);
        liftLeg(4);
        legPosReset(1);
        legPosReset(2);
        legPosReset(5);
        updateLeg(1);
        updateLeg(2);
        updateLeg(5);
        display();
        setIncrX(incr,0);
        setIncrX(incr,3);
        setIncrX(incr,4);
        updateLeg(0);
        updateLeg(3);
        updateLeg(4);
        display();
      }
      moveFront(incr);
    }
  }
}

void liftLeg(int i){
  S_ang[3*i+1]+=20;
}
